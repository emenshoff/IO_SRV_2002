/*****************************************************************************
                     created by M.E.N.
*****************************************************************************/
#include <xdr_utils.h>
#include <string.h>
#include <stdlib.h>

extern "C"{
  extern char * Win2Koi( char * str );
  extern char * Koi2Win( char * str );
}
//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
XDRPacket::XDRPacket(int direct,const void *data,int len):ready(false),buffer(0)
{  
  Set(data,len,direct);
}
//-----------------------------------------------------------------------
XDRPacket::~XDRPacket()
{
  Free();
}
//-----------------------------------------------------------------------
void XDRPacket::Free()
{
  if(buffer)
  {  delete buffer; buffer=0;xdr_destroy(&xdr); }
  len=0;
  ready=false;  
}
//-----------------------------------------------------------------------
void XDRPacket::Set(const void *data,int ln,int direct)
{
  if(ready)
    Free();
  if(ln)
  {
   buffer = new char [len = ln];
   if (data)
     memcpy(buffer, data, ln);
   else
     memset(buffer, 0, ln);
   xdrmem_create(&xdr, (char *)buffer, ln, direct == DR_IN ? XDR_DECODE : XDR_ENCODE);
   ready = true;
  }
  else
  {
    buffer = 0;
    len = 0;
    ready = false;
  }
}
//-----------------------------------------------------------------------
unsigned XDRIn::getUInt()
{
  unsigned var;
  if (!xdr_u_int(&xdr, &var))
    throw XDR_PACK_ERROR;
  return var;
}
//-----------------------------------------------------------------------
int XDRIn::getInt()
{
  int var;
  if (!xdr_int(&xdr, &var))
    throw XDR_UNPACK_ERROR;
  return var;
}
//-----------------------------------------------------------------------
ulong XDRIn::getULong()
{
  ulong var;
  if (!xdr_u_long(&xdr, &var))
    throw XDR_UNPACK_ERROR;
  return var;
}
//-----------------------------------------------------------------------
long XDRIn::getLong()
{
  long var;
  if (!xdr_long(&xdr, &var))
    throw XDR_UNPACK_ERROR;
  return var;
}                                                                        
//-----------------------------------------------------------------------
ushort XDRIn::getUShort()
{
  ushort var;
  if (!xdr_u_short(&xdr, &var))
    throw XDR_UNPACK_ERROR;
  return var;
}                                         
//-----------------------------------------------------------------------
short XDRIn::getShort()
{
  short var;
  if (!xdr_short(&xdr, &var))
    throw XDR_UNPACK_ERROR;
  return var;
}                                       
//-----------------------------------------------------------------------
char XDRIn::getChar()
{
  char var;
  if (!xdr_char(&xdr, &var))
    throw XDR_UNPACK_ERROR;
  return var;
}                                         
//-----------------------------------------------------------------------
uchar XDRIn::getUChar()
{
  uchar var;
#ifdef WIN32
  if (!xdr_u_char(&xdr, (char *) &var))
#else
  if (!xdr_u_char(&xdr, (unsigned char *) &var))
#endif
    throw XDR_UNPACK_ERROR;
  return var;
}                                         
//-----------------------------------------------------------------------
float XDRIn::getFloat()
{
  float var;
  if (!xdr_float(&xdr, &var))
    throw XDR_UNPACK_ERROR;
  return var;
}                                           
//-----------------------------------------------------------------------
double XDRIn::getDouble()
{
  double var;
  if (!xdr_double(&xdr, &var))
    throw XDR_UNPACK_ERROR;
  return var;
}          
//-----------------------------------------------------------------------
void XDRIn::getString(char * str, int maxSize, int doKoiWin)
{
  *str = 0;
/*  if(0)//???????
  {
    char bb[256];
    char * bb1=(char *)bb;
    if (!xdr_string(&xdr, &bb1, 256 ))
      throw XDR_UNPACK_ERROR;
    bb[ bb[0]+1 ]=0;
    strncpy(str,bb+1,maxSize);
  }*/
//  else
    if (!xdr_string(&xdr, &str, maxSize ))
      throw XDR_UNPACK_ERROR;
  str[maxSize-1] = 0;
  if (doKoiWin)
    Koi2Win( str );
}
//%%%%%%%%%%%%%% serialisation %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
void XDROut::putUInt(unsigned param)
{
  if (!xdr_u_int(&xdr, &param))
    throw XDR_PACK_ERROR;
}
//-----------------------------------------------------------------------
void XDROut::putInt(int param)
{
  if (!xdr_int(&xdr, &param))
    throw XDR_PACK_ERROR;
}
//-----------------------------------------------------------------------
void XDROut::putULong(ulong param)
{
  if (!xdr_u_long(&xdr, &param))
    throw XDR_PACK_ERROR;
}          
//-----------------------------------------------------------------------
void XDROut::putLong(long param)
{
  if (!xdr_long(&xdr, &param))
    throw XDR_PACK_ERROR;
}
//-----------------------------------------------------------------------
void XDROut::putUShort(ushort param)
{
  if (!xdr_u_short(&xdr, &param))
    throw XDR_PACK_ERROR;
}

//-----------------------------------------------------------------------
void XDROut::putShort(short param)
{
  if (!xdr_short(&xdr, &param))
    throw XDR_PACK_ERROR;
}  
//-----------------------------------------------------------------------
void XDROut::putChar(char param)
{
  if (!xdr_char(&xdr, &param))
    throw XDR_PACK_ERROR;
}  
//-----------------------------------------------------------------------
void XDROut::putUChar(uchar param)
{
#ifdef WIN32
  if (!xdr_u_char(&xdr, (char *) &param))
#else
  if (!xdr_u_char(&xdr, (unsigned char *) &param))
#endif
    throw XDR_PACK_ERROR;
}  
//-----------------------------------------------------------------------
void XDROut::putFloat(float param)
{
  if (!xdr_float(&xdr, &param))
    throw XDR_PACK_ERROR;
}  
//-----------------------------------------------------------------------
void XDROut::putDouble(double param)
{
  if (!xdr_double(&xdr, &param))
    throw XDR_PACK_ERROR;
}  
//-----------------------------------------------------------------------
#define XDR_SIZE_STRING     (256)
void XDROut::putString(const char * str, bool doWinKoi)
{
  char *tmpBuf = strdup(str);
  if (!tmpBuf)
  {
    free(tmpBuf);
    throw XDR_PACK_ERROR;
  }
  if (doWinKoi)
    Win2Koi( tmpBuf );                // Преобразовать Windows-кодировку 2 koi8-r
  if (!xdr_string(&xdr, &tmpBuf, XDR_SIZE_STRING))
  {
    free(tmpBuf);
    throw XDR_PACK_ERROR;
  }
  free(tmpBuf);
}
#undef XDR_SIZE_STRING
//-----------------------------------------------------------------------
/*char * Win2Koi( char * str )
{
  static uchar tab[256] = {
0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x0E,0x0F,
0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18,0x19,0x1A,0x1B,0x1C,0x1D,0x1E,0x1F,
0x20,0x21,0x22,0x23,0x24,0x25,0x26,0x27,0x28,0x29,0x2A,0x2B,0x2C,0x2D,0x2E,0x2F,
0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x3A,0x3B,0x3C,0x3D,0x3E,0x3F,
0x40,0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x4A,0x4B,0x4C,0x4D,0x4E,0x4F,
0x50,0x51,0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5A,0x5B,0x5C,0x5D,0x5E,0x5F,
0x60,0x61,0x62,0x63,0x64,0x65,0x66,0x67,0x68,0x69,0x6A,0x6B,0x6C,0x6D,0x6E,0x6F,
0x70,0x71,0x72,0x73,0x74,0x75,0x76,0x77,0x78,0x79,0x7A,0x7B,0x7C,0x7D,0x7E,0x7F,
0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,
0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F,
0xA0,0xA1,0xA2,0xA5,0xA3,0xA8,0xB3,0xA9,0xB3,0xB4,0xAB,0xAC,0xAD,0xAE,0xAF,0xB7,
0xB0,0xB1,0xB2,0xB6,0xA6,0xB5,0xB8,0xB9,0xA3,0xBA,0xBB,0xBC,0xBD,0xBE,0xA7,0xBF,
0xE1,0xE2,0xF7,0xE7,0xE4,0xE5,0xF6,0xFA,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF,0xF0,
0xF2,0xF3,0xF4,0xF5,0xE6,0xE8,0xE3,0xFE,0xFB,0xFD,0xFF,0xF9,0xF8,0xFC,0xE0,0xF1,
0xC1,0xC2,0xD7,0xC7,0xC4,0xC5,0xD6,0xDA,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,
0xD2,0xD3,0xD4,0xD5,0xC6,0xC8,0xC3,0xDE,0xDB,0xDD,0xDF,0xD9,0xD8,0xDC,0xC0,0xD1
  };

  for ( char * s = str; *s; s++ )
    *s = tab[(unsigned char)*s];
  return str;
}

//-----------------------------------------------------------------------
char * Koi2Win( char * str )
{
  static uchar tab[256] = {
0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x0E,0x0F,
0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18,0x19,0x1A,0x1B,0x1C,0x1D,0x1E,0x1F,
0x20,0x21,0x22,0x23,0x24,0x25,0x26,0x27,0x28,0x29,0x2A,0x2B,0x2C,0x2D,0x2E,0x2F,
0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x3A,0x3B,0x3C,0x3D,0x3E,0x3F,
0x40,0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x4A,0x4B,0x4C,0x4D,0x4E,0x4F,
0x50,0x51,0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5A,0x5B,0x5C,0x5D,0x5E,0x5F,
0x60,0x61,0x62,0x63,0x64,0x65,0x66,0x67,0x68,0x69,0x6A,0x6B,0x6C,0x6D,0x6E,0x6F,
0x70,0x71,0x72,0x73,0x74,0x75,0x76,0x77,0x78,0x79,0x7A,0x7B,0x7C,0x7D,0x7E,0x7F,
0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,
0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F,
0xA0,0xA1,0xA2,0xB8,0xBA,0xA5,0xB3,0xBF,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,
0xB0,0xB1,0xB2,0xA8,0xAA,0xB5,0xB2,0xAF,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF,
0xFE,0xE0,0xE1,0xF6,0xE4,0xE5,0xF4,0xE3,0xF5,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,
0xEF,0xFF,0xF0,0xF1,0xF2,0xF3,0xE6,0xE2,0xFC,0xFB,0xE7,0xF8,0xFD,0xF9,0xF7,0xFA,
0xDE,0xC0,0xC1,0xD6,0xC4,0xC5,0xD4,0xC3,0xD5,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,
0xCF,0xDF,0xD0,0xD1,0xD2,0xD3,0xC6,0xC2,0xDC,0xDB,0xC7,0xD8,0xDD,0xD9,0xD7,0xDA
  };
  for ( char * s = str; *s; s++ )
    *s = tab[(unsigned char)*s];
  return str;
}*/
//-----------------------------------------------------------------------
